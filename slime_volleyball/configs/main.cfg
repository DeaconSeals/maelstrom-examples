[MAELSTROM]
islands = {'1': 'ISLAND'}
migration_edges = []

evaluations = 50000

[GENERAL]
render = False
default_test = False
analysis = False
logpath = logs/debug
experiment_name = slime_volleyball
runs = 2
num_champions = 5
find_local_champions = True
final_champions = 5
parallelize_runs = True


#popSize = math.ceil(200/len(${MAELSTROM:islands}))
#numChildren = math.ceil(100/len(${MAELSTROM:islands}))
pop_size = 200
num_children = 100
parent_selection = k_tournament
k_parent = 10
mutation = 0.1
survival_strategy = plus
survival_selection = truncation


depth_limit = 5
hard_limit = 20
depth_min = 1
output_type = FLOAT

[ISLAND]
populations = {'left_slime': 'left_slime', 'right_slime': 'right_slime'}
evaluation_function = fitness 
evaluationkwargs = {"samples": 5, "env": env}
champions_per_generation = 5

[left_slime]
roles = (GENERAL, QVALUES)
output_type = ${GENERAL:output_type}
depth_limit = ${GENERAL:depth_limit}
hard_limit = ${GENERAL:hard_limit}
depth_min = ${GENERAL:depth_min}
pop_size =${GENERAL:pop_size}
num_children = ${GENERAL:num_children}
parent_selection = ${GENERAL:parent_selection}
k_parent = ${GENERAL:k_parent}

mutation = ${GENERAL:mutation}
survival_strategy = ${GENERAL:survival_strategy}
survival_selection = ${GENERAL:survival_selection}

[right_slime]
roles = (GENERAL, QVALUES)
output_type = ${GENERAL:output_type}
depth_limit = ${GENERAL:depth_limit}
hard_limit = ${GENERAL:hard_limit}
depth_min = ${GENERAL:depth_min}
pop_size =${GENERAL:pop_size}
num_children = ${GENERAL:num_children}
parent_selection = ${GENERAL:parent_selection}
k_parent = ${GENERAL:k_parent}
mutation = ${GENERAL:mutation}
survival_strategy = ${GENERAL:survival_strategy}
survival_selection = ${GENERAL:survival_selection}

